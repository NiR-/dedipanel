<?php

/**
 * UserTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object UserTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('User');
    }
    
    public function isValidIdents($pseudo, $mdp) {
        $q = Doctrine_Query::create()->select('id, pseudo, email, lang')->from('User')
            ->where('pseudo = ?')->andWhere('mdp = ?');
        $user = $q->fetchOne(array($pseudo, $mdp), Doctrine_Core::HYDRATE_ARRAY);
        $q->free();
        
        return $user;
    }
    
    // Vérifie l'utilisation d'un pseudo/mail
    public function existsIdents($pseudo, $email) {
        $q = Doctrine_Query::create()->select('id')->from('User')
            ->where('pseudo = ?')->orWhere('email = ?');
        $exist = $q->fetchOne(array($pseudo, $email), Doctrine_Core::HYDRATE_ARRAY);
        $q->free();
        
        return $exist['id'];
    }
    
    public function addUser($pseudo, $mdp, $email, $lang, $su, $groups) {
        // On créer un utilisateu et, on ajoute les données
        $user = new User();
        $user->pseudo = $pseudo;
        $user->email = $email;
        $user->mdp = sha1($mdp);
        $user->lang = $lang;
        $user->su = $su;

        // On vérifie si le ndd de l'email ezt bon via le filtre doctrine
        // On renvoie false s'il n'est pas bon
        if ($user->isValid()) {
            $user->save();
            $uid = $user->id;

            // On ajoute les groupes voulues
            if (isset($groups)) {
                foreach ($groups AS $group) {
                    $access = new UserGroup();
                    $access->user_id = $uid;
                    $access->group_id = $group;
                    $access->save();
                }
            }
            
            return true;
        }
        else return false;
    }
    
    public function modifyUser($uid, $pseudo, $email, $lang, $mdp = null, $su = null, $groups = null) {
        $q = Doctrine_Query::create()
            ->update('User')
            ->set('pseudo', '?', $pseudo)
            ->set('email', '?', $email)
            ->set('lang', '?', $lang)
            ->where('id = ?', $uid);
        
        // On modifie le mdp et la valeur de su (si nécessaire)
        if ($mdp != null) $q->set('mdp', 'SHA1(?)', $mdp);
        if ($su != null) $q->set('su', '?', $su);
        $q->execute();
        
        // Si on souhaite modifier les groupes de l'utilisateur
        // On les supprimes puis on les recréer
        if (isset($groups)) {
            $del = Doctrine_Query::create()->delete('UserGroup')->where('user_id = ?', $uid);
            $del->execute(); $del->free();
            
            foreach ($groups AS $group) {
                $access = new UserGroup();
                $access->user_id = $uid;
                $access->group_id = $group;
                $access->save();
            }
        }
    }
    
    public function delete($uid) {
        $q = Doctrine_Query::create()->delete('User')->where('id = ?', $uid);
        return $q->execute();
    }

    public function getHydrateUser($uid) {
        $q = Doctrine_Query::create()->select('pseudo, email, lang, su')->from('User')
            ->where('id = ?', $uid);
        $res = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
        $q->free();
        
        // On récupère les groupes de l'utilisateur
        $qGroups = Doctrine_Query::create()->select('group_id')->from('UserGroup')
            ->where('user_id = ?', $uid);
        $groups = $qGroups->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        $qGroups->free();
        
        $newGroups = array();
        foreach ($groups AS $group) {
            $newGroups[$group['group_id']] = true;
        }
        
        $res['groups'] = $newGroups;
        
        return $res;
    }
}